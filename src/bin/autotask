#!/usr/bin/env autoscript
#
# Entrypoint for the autoshell.sh task scripting framework.

# TASK_EXECUTION_LOG: Used by all child processes to log which tasks have been
#   executed during this task flow
# TASK_MAIN: name of the main task triggered, some logic should only execute
#   during the main task
export \
    TASK_EXECUTION_LOG \
    TASK_MAIN \
    TASK_NAME \
    LOG_CONTEXT_BUILDER="autotask:"

__script_parse_opts() {
    TASK_NAME="${1}"

    declare -g TASK_FILE
    
    [ -n "${TASK_MAIN-}" ] || \
        TASK_MAIN="${TASK_NAME}"
}

__script_init() {
    include "$(find_lib autotask)"
    include "$(find_lib autotask.tasklog)"
    include "$(find_lib autotask.config)"

    TASK_FILE="$(task.find_file "${TASK_NAME}")"

    [ -n "${TASK_FILE-}" ] || \
        fatal "Task ${TASK_NAME} could not be found in the AUTOSHELL_TASK_PATH"

    tasklog.initialize
    if tasklog.is_complete "${TASK_NAME}"; then
        TASK_SKIP="true"
    fi

    unset -f task.exec task.dependencies task.up_to_date
    include "${TASK_FILE}" || \
        fatal "The task file ${TASK_FILE} is invalid"

    [ "$(type -t task.exec)" = "function" ] || \
        fatal "Task file ${TASK_FILE} is invalid, task.exec() is not defined"

    [ "$(type -t task.dependencies)" = "function" ] && \
        execute_task_dependencies

    task.load_config "${TASK_NAME}"

    tasklog.set_entry "${TASK_NAME}"
}

__script_exec() {
    [ "${TASK_SKIP-}" = "true" ] && return

    [ "$(type -t task.up_to_date)" = "function" ] && task.up_to_date && return

    task.exec
}

__script_succeed() {
    tasklog.set_entry "${TASK_NAME}" "${TASKLOG_COMPLETION_MARK}"

    if [ "${TASK_NAME}" = "${TASK_MAIN}" ]; then
        local next_task_name
        next_task_name="$(tasklog.get_next_pending)"

        [ -n "${next_task_name-}" ] || \
            return 0

        autotask "${next_task_name}"
    fi
}